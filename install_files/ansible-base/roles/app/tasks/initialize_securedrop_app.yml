---
- name: Install SecureDrop Application Server dependencies.
  apt:
    pkg: "{{ item }}"
    state: latest
  with_items: "{{ appserver_dependencies }}"
  tags:
    - apt

- name: Copy the SecureDrop Application GPG public key to the Application Server.
  copy:
    src: "{{ securedrop_app_gpg_public_key }}"
    dest: "{{ securedrop_data }}/"
  tags:
    - securedrop_config

- name: Import the SecureDrop Application GPG public key to the Application Server keyring.
  # multiline format for command module, since this is a long command
  command: >
    su -s /bin/bash -c 'gpg
    --homedir {{ securedrop_data }}/keys
    --import {{ securedrop_data }}/{{ securedrop_app_gpg_public_key }}' {{ securedrop_user }}
  register: gpg_app_key_import
  changed_when: "'imported: 1' in gpg_app_key_import.stderr"
  tags:
    - gpg
    - securedrop_config

# This file is guaranteed to exist since migrate_config.py runs on `postinst`
# and this task runs the Debian packages are installed.
- name: Slurp existing config.json.
  slurp:
    path: "/etc/securedrop/config.json"
  register: config_json

- name: Regiser config.json vars.
  set_fact:
    source_config: '{{ config_json["source_interface"] }}'
    journalist_config: '{{ config_json["journalist_interface"] }}'

- name: Ensure source interface has a secret key.
  set_fact:
    source_config: '{{ {"secret_key": lookup("pipe", "head -c 32 /dev/urandom | base64")} | combine(source_config) }}'
  when: "'secret_key' in source_config"
  tags:
    - securedrop_config

- name: Ensure journalist interface has a secret key.
  set_fact:
    journalist_config: '{{ {"secret_key": lookup("pipe", "head -c 32 /dev/urandom | base64")} | combine(journalist_config) }}'
  when: "'secret_key' in journalist_config"
  tags:
    - securedrop_config

- name: Generate 32-byte value for "scrypt id pepper".
  shell: "head -c 32 /dev/urandom | base64"
  register: scrypt_id_pepper
  when: "'scrypt_id_pepper' not in source_config['scrypt_id_pepper']"
  tags:
    - securedrop_config

- name: Add 32-byte value for "scrypt id pepper" to config.
  set_fact:
    source_config: '{{ {"scrypt_id_pepper": scrypt_id_pepper} | combine(source_config) }}'
    journalist_config: '{{ {"scrypt_id_pepper": scrypt_id_pepper} | combine(journalist_config) }}'
  when: scrypt_id_pepper exists
  tags:
    - securedrop_config

- name: Generate 32-byte value for "scrypt gpg pepper".
  shell: "head -c 32 /dev/urandom | base64"
  register: scrypt_gpg_pepper
  when: "'scrypt_gpg_pepper' not in source_config['scrypt_gpg_pepper']"
  tags:
    - securedrop_config

- name: Add 32-byte value for "scrypt id pepper" to config.
  set_fact:
    source_config: '{{ {"scrypt_gpg_pepper": scrypt_gpg_pepper} | combine(source_config) }}'
    journalist_config: '{{ {"scrypt_gpg_pepper": scrypt_gpg_pepper} | combine(journalist_config) }}'
  when: scrypt_gpg_pepper exists
  tags:
    - securedrop_config

- name: Declare Application GPG fingerprint in config.py.
  set_fact:
    source_config: '{{ combine(source_config) | {"journalist_key": securedrop_app_gpg_fingerprint} }}'
    journalist_config: '{{ combine(source_config) | {"journalist_key": securedrop_app_gpg_fingerprint} }}'
  tags:
    - gpg
    - securedrop_config

- name: Merge source and journalist configs.
  set_fact:
    config_json: '{{ {"source_interface": source_config, "journalist_interface": journalist_config} }}'

- name: Write config.json
  file:
    dest: "/etc/securedrop/config.json"
    owner: "{{ securedrop_user }}"
    group: "{{ securedrop_user }}"
    mode: "0600"
    content: '{{ config_json | to_nice_json }}'
  tags:
    - permissions
    - securedrop_config

- name: Check whether sqlite database exists.
  stat:
    path: "{{ securedrop_data }}/db.sqlite"
  register: db
  # Read-only task, so don't report changed.
  changed_when: false
  tags:
    - database
    - securedrop_config

- name: Initialize sqlite database.
  shell: './manage.py init-db --user {{ securedrop_user }}'
  args:
    chdir: '{{ securedrop_code }}'
  when: not db.stat.exists
  tags:
    - database
    - securedrop_config
